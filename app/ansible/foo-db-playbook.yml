- name: Configure database server
  hosts: db_servers   # coming from inventory2.yml file
  remote_user: ubuntu
  become: yes # sudo

  tasks:
  # Installing everything thats needed for docker
  - name: Install required system packages for Docker
    # using apt tool to install
    apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - software-properties-common
        - python3-pip
        - virtualenv
        - python3-setuptools
        - postgresql-client
      state: latest
      update_cache: true
  # Steps to install docker
  - name: Add Docker GPG apt Key
    # Adding a key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    # Adding a repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu jammy stable
      state: present

  - name: Update apt and install docker-ce
    # Once the key and repo is added it allows the apt package manager to install
    # the docker engine and the docker utility
    apt:
      name: docker-ce
      state: latest
      update_cache: true

  - name: Create & run database container
    # Find a docker container and there is this community build command/task for this
    community.docker.docker_container:
      name: "foo-db"      # create a db
      image: "postgres:14.7"    # using a specific version of sql
      # using the env we are going to pass in some envirnment variables
      env:
        POSTGRES_PASSWORD=devops
        POSTGRES_USER=pete
        POSTGRES_DB=foo
      published_ports:
      - "0.0.0.0:5432:5432"

      # Volumes copies the contents of "snapshot-prod-data.sql to init.sql"
      volumes:
      # When spinning up the image container we can run an sql script, the default one is init.sql
      - "../misc/snapshot-prod-data.sql:/docker-entrypoint-initdb.d/init.sql"
